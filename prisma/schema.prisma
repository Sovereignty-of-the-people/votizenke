// This is your Prisma schema file,
// learn more about it in docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  posts         Post[]
  comments      Comment[]
  lessons       UserLesson[]
  referrals     Referral[] @relation("Referrer")
  referredBy    Referral[] @relation("Referred")
  
  @@map("users")
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  category    String
  authorId    String    @db.ObjectId
  likes       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  
  @@map("posts")
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String    @db.ObjectId
  authorId  String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  content     String
  duration    Int      // in minutes
  difficulty  String   // Beginner, Intermediate, Advanced
  category    String
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userLessons UserLesson[]
  
  @@map("lessons")
}

model UserLesson {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  lessonId   String   @db.ObjectId
  progress   Int      @default(0) // 0-100
  completed  Boolean  @default(false)
  startedAt  DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("user_lessons")
}

model Referral {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId  String   @db.ObjectId
  referredId  String   @db.ObjectId
  status      String   @default("pending") // pending, accepted, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  referrer    User     @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referred    User     @relation("Referred", fields: [referredId], references: [id])
  
  @@unique([referrerId, referredId])
  @@map("referrals")
}